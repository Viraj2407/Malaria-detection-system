from flask import Flask, render_template, request, send_from_directory, redirect, url_for
from werkzeug.utils import secure_filename
from flask import send_file
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from datetime import datetime
import io
import os
import cv2
import numpy as np
from tensorflow.keras.models import load_model

app = Flask(__name__)

# Configure upload folder
UPLOAD_FOLDER = os.path.join(os.path.dirname(__file__), 'images')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

loaded_model = load_model('malaria.h5')

@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory('static', filename)

@app.route('/images/<path:filename>')
def serve_images(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)

@app.route('/')
def splash():
    return render_template('splash.html')

@app.route('/doctor-info')
def doctor_info():
    return render_template('doctor_info.html')

@app.route('/submit-doctor-info', methods=['POST'])
def submit_doctor_info():
    return redirect(url_for('patient_info'))

@app.route('/patient-info')
def patient_info():
    return render_template('patient_info.html')

@app.route('/submit-patient-info', methods=['POST'])
def submit_patient_info():
    return redirect(url_for('index'))

@app.route('/home')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload():
    if 'file' not in request.files:
        return render_template('index.html', message='No file part')

    file = request.files['file']

    if file.filename == '':
        return render_template('index.html', message='No selected file')

    if file:
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        try:
            file.save(file_path)
            
            img = cv2.imread(file_path)
            img = cv2.resize(img, (224, 224))
            img = img / 255.0
            img = np.reshape(img, (1, 224, 224, 3))

            prediction = loaded_model.predict(img)
            result = "Malaria Not Detected" if prediction[0][0] > 0.5 else "Malaria Detected"
            return redirect(url_for('result', filename=filename, result=result))
            
        except Exception as e:
            return render_template('index.html', message=f'Error processing file: {str(e)}')

@app.route('/result')
def result():
    filename = request.args.get('filename')
    result = request.args.get('result')
    return render_template('result.html', filename=filename, result=result)

# Remove the entire generate_report route
# @app.route('/generate-report/<filename>/<result>')
# def generate_report(filename, result):
#    buffer = io.BytesIO()
#    c = canvas.Canvas(buffer, pagesize=letter)
#    width, height = letter
#    
#    c.setFont("Helvetica-Bold", 24)
#    c.drawString(50, height - 50, "Malaria Detection Report")
#    
#    c.setFont("Helvetica", 12)
#    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#    c.drawString(50, height - 80, f"Generated on: {current_time}")
#    
#    c.setFont("Helvetica-Bold", 16)
#    c.drawString(50, height - 120, "Analysis Result:")
#    c.setFont("Helvetica", 14)
#    c.drawString(50, height - 140, result)
#    
#    img_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
#    if os.path.exists(img_path):
#        c.drawImage(img_path, 50, height - 400, width=300, height=200)
#    
#    c.setFont("Helvetica-Italic", 10)
#    c.drawString(50, 50, "This report was automatically generated by Malaria Detection System")
#    
#    c.save()
#    buffer.seek(0)
#    
#    return send_file(
#        buffer,
#        as_attachment=True,
#        download_name=f'malaria_detection_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf',
#        mimetype='application/pdf'
#    )

@app.route('/view-report/<filename>/<result>')
def view_report(filename, result):
    # In a real application, you would fetch this from your database
    doctor_info = {
        'fullname': 'Dr. Sample Name',  # Replace with actual doctor info
        'specialization': 'Pathologist',
        'hospital': 'Sample Hospital'
    }
    
    patient_info = {
        'fullname': 'Patient Name',  # Replace with actual patient info
        'age': '30',
        'gender': 'Male',
        'contact': '1234567890'
    }
    
    return render_template('medical_report.html',
                         filename=filename,
                         result=result,
                         doctor_info=doctor_info,
                         patient_info=patient_info,
                         datetime=datetime)

if __name__ == '__main__':
    app.run(debug=True)
